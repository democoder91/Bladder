@page "/Machines/Index"

@inherits BladderComponentBase
@inject IBuildingMachineService machineService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@attribute [Authorize("Machine_Index")]

<h1>@L["Machines"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <RadzenRow>
            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Machine Code"]</div>
                    <InputText @bind-Value="@MachineCodeFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Status"]</div>
                    <InputSelect @bind-Value="@MachineStatusFilter" class="form-control">
                        <option value="">@L["Select Status"]</option>
                        <option value="Stopped">@L["Stopped"]</option>
                        <option value="Full">@L["Full"]</option>
                        
                    </InputSelect>
                </div>
            </RadzenColumn>
        </RadzenRow>

        <div class="d-flex flex-row">
            <a @onclick="ApplyFilters" class="btn btn-primary mx-1">@L["Filter"]</a>
            <a @onclick="ClearFilters" class="btn btn-secondary mx-1">@L["Reset"]</a>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between">
            <div>
                <h2>@L["Building Machines"]</h2>
            </div>
            <AuthorizeView Policy="Machine_Create">
                <div>
                    <a href="/Machines/Create" class="btn btn-primary">@L["Create New Machine"]</a>
                </div>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body">
        <RadzenDataGrid @bind-Data=@Machines
                        AllowPaging="true" PageSize="10" AllowFiltering="true" AllowRazenColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced">
            <Columns>
                <RadzenDataGridColumn TItem="BuildingMachine" Property="Code" Title="@L["Machine Code"]" />
                <RadzenDataGridColumn TItem="BuildingMachine" Property="Full" Title="@L["Status"]">
                    <Template Context="machine">
                        @(machine.Full ? L["Working"] : L["Stopped"])
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BuildingMachine">
                    <Template Context="machine">
                        <AuthorizeView Policy="Machine_Edit">
                            <a href="/Machines/Edit/@machine.Id" class="btn btn-link">@L["Edit"]</a>
                        </AuthorizeView>
                        <AuthorizeView Policy="Machine_Delete">
                            <a @onclick="()=> ConfirmDelete(machine.Id)" class="btn btn-link">@L["Delete"]</a>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    public List<BuildingMachine> Machines { get; set; } = new();
    public string? MachineCodeFilter { get; set; } = string.Empty;
    public string? MachineStatusFilter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Machines = await machineService.GetAllAsync();
    }

    public async Task ApplyFilters()
    {
        Machines = await machineService.GetAllAsync();
        var query = Machines.AsQueryable();
        if (!string.IsNullOrEmpty(MachineCodeFilter))
        {
            query = query.Where(b => b.Code.Contains(MachineCodeFilter));
        }
        if (!string.IsNullOrEmpty(MachineStatusFilter))
        {
            
            query = query.Where(b => b.Full == (MachineStatusFilter == "Stopped"? false:true));
        }

        Machines = query.ToList();
    }

    public async void ClearFilters()
    {
        Machines = await machineService.GetAllAsync();
        MachineCodeFilter = null;
    }

    private async Task ConfirmDelete(int id)
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to delete this machine?"].ToString());
        if (result)
        {
            // User confirmed the deletion, proceed with deletion logic
            await DeleteMachine(id);
        }
    }

    private async Task DeleteMachine(int id)
    {
        // Call the service to delete the machine
        await machineService.DeleteAsync(id);

        // Refresh the machine list
        Machines = await machineService.GetAllAsync();

        // Show success notification
        await uiNotificationService.Success(@L["Machine Deleted Successfully"]);
    }
}
