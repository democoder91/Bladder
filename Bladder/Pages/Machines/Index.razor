@page "/Machines/Index"

@inherits BladderComponentBase
@inject IBuildingMachineService machineService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@attribute [Authorize("Machine_Index")]
<h1>@L["Machines"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <Row>
            <Column>
                <div class="form-group">
                    <div class="label">@L["Machine Code"]</div>
                    <InputText @bind-Value="@MachineCodeFilter" class="form-control" />
                </div>
            </Column>
        </Row>

        <div class="d-fex flex-row">
            <a @onclick="ApplyFilters" class="btn btn-primary">@L["Filter"]</a>
            <a @onclick="ClearFilters" class="btn btn-secondary">@L["Reset"]</a>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between  ">
            <div>
                <h2>@L["Building Machines"]</h2>
            </div>
            <AuthorizeView Policy="Machine_Create">
                <div>
                    <a href="/Machines/Create" class="btn btn-primary">@L["Create New Machine"]</a>
                </div>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body">
        <table class="table ">
            <thead>
                <tr>
                    <th>@L["Machine Code"]</th>
                    <th>@L["Status"]</th>
                    
                    <th>@L["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @if (Machines.Count() > 0)
                {
                    @foreach (var machine in Machines)
                    {
                        <tr>
                            <td>@machine.Code</td>
                            <td>@(machine.Full? L["Working"] : L["Stopped"])</td>
                            <td>
                                <AuthorizeView Policy="Machine_Edit">
                                    <a href="/Machines/Edit/@machine.Id" class="btn btn-link">@L["Edit"]</a>
                                </AuthorizeView>
                                <AuthorizeView Policy="Machine_Delete">
                                    <a @onclick="()=> ConfirmDelete(machine.Id)" class="btn btn-link">@L["Delete"]</a>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }

                }
                else
                {
                    <span>@L["No Machines Available"]</span>
                }
            </tbody>
        </table>
    </div>
</div>






@code {
    public List<BuildingMachine> Machines { get; set; } = new();
    public string? MachineCodeFilter { get; set; } = string.Empty;




    protected override async Task OnInitializedAsync()
    {
        Machines = await machineService.GetAllAsync();
    }
    public async Task ApplyFilters()
    {

        Machines = await machineService.GetAllAsync();
        var query = Machines.AsQueryable();
        if (MachineCodeFilter != string.Empty)
        {
            query = query.Where(b => b.Code.Contains(MachineCodeFilter));
        }
        

        Machines = query.ToList();


        StateHasChanged();
    }
    public async void ClearFilters()
    {
        Machines = await machineService.GetAllAsync();
        MachineCodeFilter = null;
        StateHasChanged();

    }


    private async Task ConfirmDelete(int id)
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to delete this machine?"].ToString());
        if (result)
        {
            // User confirmed the deletion, proceed with deletion logic
            await DeleteBladder(id);
        }
    }

    private async Task DeleteBladder(int id)
    {
        // Call the service to delete the bladder
        await machineService.DeleteAsync(id);

        // Refresh the bladder list
        Machines = await machineService.GetAllAsync();

        // Hide the edit modal
        await uiNotificationService.Success(@L["Machine Deleted Successfully"]);
    }


}