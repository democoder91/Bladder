@page "/Findings/Index"
@using Bladder.Constants;
@using Bladder.Entities;
@using Bladder.Services;
@using Volo.Abp.AspNetCore.Components.Notifications;
@inherits BladderComponentBase
@inject IFindingService findingService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@attribute [Authorize("Finding_Index")]
<h1>@L["Findings"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <Row>
            <Column>
                <div class="form-group">
                    <div class="label">@L["Finding Description"]</div>
                    <InputText @bind-Value="@FindingDescriptionFilter" class="form-control" />
                </div>
            </Column>
        </Row>

        <div class="d-fex flex-row">
            <a @onclick="ApplyFilters" class="btn btn-primary">@L["Filter"]</a>
            <a @onclick="ClearFilters" class="btn btn-secondary">@L["Reset"]</a>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between  ">
            <div>
                <h2>@L["Findings"]</h2>
            </div>
            <AuthorizeView Policy="Finding_Create">
                <div>
                    <a href="/Findings/Create" class="btn btn-primary">@L["Create New Finding"]</a>
                </div>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body">
        <table class="table ">
            <thead>
                <tr>
                    <th>@L["Finding Icon"]</th>
                    <th>@L["Finding Description"]</th>
                    
                    <th>@L["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @if (Findings.Count() > 0)
                {
                    @foreach (var finding in Findings)
                    {
                        <tr>
                            <td>
                                <div class="@finding.IconClass"></div>
                            </td>
                            <td>@finding.Description</td>
                            <td>
                                <AuthorizeView Policy="Finding_Edit">
                                    <a href="/Findings/Edit/@finding.Id" class="btn btn-link">@L["Edit"]</a>
                                </AuthorizeView>
                                <AuthorizeView Policy="Finding_Delete">
                                    <a @onclick="()=> ConfirmDelete(finding.Id)" class="btn btn-link">@L["Delete"]</a>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }

                }
                else
                {
                    <span>@L["No Findings Available"]</span>
                }
            </tbody>
        </table>
    </div>
</div>






@code {
    public List<Finding> Findings { get; set; } = new();
    public string? FindingDescriptionFilter { get; set; } = string.Empty;




    protected override async Task OnInitializedAsync()
    {
        Findings = await findingService.GetAllAsync();
    }
    public async Task ApplyFilters()
    {

        Findings = await findingService.GetAllAsync();
        var query = Findings.AsQueryable();
        if (string.IsNullOrEmpty(FindingDescriptionFilter))
        {
            query = query.Where(b => b.Description.Contains(FindingDescriptionFilter));
        }
        

        Findings = query.ToList();


        StateHasChanged();
    }
    public async void ClearFilters()
    {
        Findings = await findingService.GetAllAsync();
        FindingDescriptionFilter = null;
        StateHasChanged();

    }


    private async Task ConfirmDelete(int id)
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to delete this finding?"].ToString());
        if (result)
        {
            // User confirmed the deletion, proceed with deletion logic
            await DeleteBladder(id);
        }
    }

    private async Task DeleteBladder(int id)
    {
        // Call the service to delete the bladder
        await findingService.DeleteAsync(id);

        // Refresh the bladder list
        Findings = await findingService.GetAllAsync();

        // Hide the edit modal
        await uiNotificationService.Success(@L["Finding Deleted Successfully"]);
    }


}