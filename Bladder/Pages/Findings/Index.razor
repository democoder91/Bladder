@page "/Findings/Index"

@inherits BladderComponentBase
@inject IFindingService findingService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@attribute [Authorize("Finding_Index")]
<h1>@L["Findings"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <Row>
            <Column>
                <div class="form-group">
                    <div class="label">@L["Finding Description"]</div>
                    <InputText @bind-Value="@FindingDescriptionFilter" class="form-control" />
                </div>
            </Column>
        </Row>

        <div class="d-flex flex-row">
            <a @onclick="ApplyFilters" class="btn btn-primary">@L["Filter"]</a>
            <a @onclick="ClearFilters" class="btn btn-secondary">@L["Reset"]</a>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between">
            <div>
                <h2>@L["Findings"]</h2>
            </div>
            <AuthorizeView Policy="Finding_Create">
                <div>
                    <a href="/Findings/Create" class="btn btn-primary">@L["Create New Finding"]</a>
                </div>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body">
        <RadzenDataGrid @bind-Data=@Findings
                        AllowPaging="true" PageSize="10" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced">
            <Columns>
                <RadzenDataGridColumn TItem="Finding" Property="IconClass" Title="@L["Finding Icon"]">
                    <Template Context="finding">
                        <div class="@finding.IconClass"></div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Finding" Property="Description" Title="@L["Finding Description"]" />
                <RadzenDataGridColumn TItem="Finding">
                    <Template Context="finding">
                        <div style="text-align: center;">
                            <AuthorizeView Policy="Finding_Edit">
                                <a href="/Findings/Edit/@finding.Id" class="btn btn-link">@L["Edit"]</a>
                            </AuthorizeView>
                            <AuthorizeView Policy="Finding_Delete">
                                <a @onclick="()=> ConfirmDelete(finding.Id)" class="btn btn-link">@L["Delete"]</a>
                            </AuthorizeView>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    public List<Finding> Findings { get; set; } = new();
    public string? FindingDescriptionFilter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Findings = await findingService.GetAllAsync();
    }

    public async Task ApplyFilters()
    {
        Findings = await findingService.GetAllAsync();
        var query = Findings.AsQueryable();

        if (!string.IsNullOrEmpty(FindingDescriptionFilter))
        {
            query = query.Where(f => f.Description.Contains(FindingDescriptionFilter));
        }

        Findings = query.ToList();
    }

    public async void ClearFilters()
    {
        Findings = await findingService.GetAllAsync();
        FindingDescriptionFilter = null;
    }

    private async Task ConfirmDelete(int id)
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to delete this finding?"].ToString());
        if (result)
        {
            // User confirmed the deletion, proceed with deletion logic
            await DeleteFinding(id);
        }
    }

    private async Task DeleteFinding(int id)
    {
        // Call the service to delete the finding
        await findingService.DeleteAsync(id);

        // Refresh the finding list
        Findings = await findingService.GetAllAsync();

        // Show a success notification
        await uiNotificationService.Success(@L["Finding Deleted Successfully"]);
    }
}
