@page "/Transactions/Index"
@{
    var breadcrumbItems = new List<Volo.Abp.BlazoriseUI.BreadcrumbItem>() {
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(@L["Bladder Transactions"]),

    };
}
<Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader BreadcrumbItems="@breadcrumbItems">
</Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader>


@inherits BladderComponentBase
@inject IBladderTransactionService transactionService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@inject NavigationManager navManager
@attribute [Authorize("Transaction_Index")]



<h1>@L["Bladder Transactions"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <RadzenRow>
            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Bladder Code"]</div>
                    <InputText @bind-Value="@BladderCodeFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Created At (From)"]</div>
                    <InputDate @bind-Value="@CreatedAtFromFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Created At (To)"]</div>
                    <InputDate @bind-Value="@CreatedAtToFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Transaction Type"]</div>
                    <InputSelect @bind-Value="@TransactionTypeFilter" class="form-control">
                        <option value="">@L["All"]</option>
                        @foreach (TransactionTypes type in Enum.GetValues(typeof(TransactionTypes)))
                        {
                            <option value="@type.ToString()">@L[type.ToString()]</option>
                        }
                    </InputSelect>
                </div>
            </RadzenColumn>
        </RadzenRow>

        
        <RadzenRow>
            <div class="mx-1"><RadzenButton Click=ApplyFilters Text="@L["Filter"]" ButtonStyle="ButtonStyle.Primary" /></div>
            <div class="mx-1"><RadzenButton Click=ClearFilters Text="@L["Reset"]" ButtonStyle="ButtonStyle.Secondary" /></div>
        </RadzenRow>

    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between">
            <div>
                <h2>@L["Bladder Transactions"]</h2>
            </div>
            <RadzenRow>
                <AuthorizeView Policy="Transaction_MountCreate">
                    <RadzenColumn><RadzenButton Click=@(args => OnClick("/Transactions/CreateMountTransaction")) Text="@L["Mount"]" ButtonStyle="ButtonStyle.Primary" /></RadzenColumn>
                </AuthorizeView>
                <AuthorizeView Policy="Transaction_DismountCreate">
                    <RadzenColumn><RadzenButton Click=@(args => OnClick("/Transactions/CreateDismountTransaction")) Text="@L["Dismount"]" ButtonStyle="ButtonStyle.Primary" /></RadzenColumn>
                </AuthorizeView>
                <AuthorizeView Policy="Transaction_MaintenanceCreate">
                    <RadzenColumn><RadzenButton Click=@(args => OnClick("/Transactions/CreateMaintenanceTransaction")) Text="@L["Maintenance"]" ButtonStyle="ButtonStyle.Primary" /></RadzenColumn>
                </AuthorizeView>
                <AuthorizeView Policy="Transaction_TestCreate">
                    <RadzenColumn><RadzenButton Click=@(args => OnClick("/Transactions/CreateTestTransaction")) Text="@L["Test"]" ButtonStyle="ButtonStyle.Primary" /></RadzenColumn>
                </AuthorizeView>
            </RadzenRow>
        </div>
    </div>
    <div class="card-body">
        <RadzenDataGrid @bind-Value=@selectedItems Data="@FilteredTransactions" TItem="BladderTransaction" RazenColumnWidth="200px"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterMode="FilterMode.Advanced"
                        AllowPaging="true" PageSize="@pageSize" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="BladderTransaction" Title="@L["Bladder Code"]" Property="Bladder.BladderCode" />
                <RadzenDataGridColumn TItem="BladderTransaction" Title="@L["Created At"]" Filterable="false" Reorderable="false" Sortable="false">
                    <Template>
                        @context.CreatedAt.ToString("dd/MM/yyyy")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BladderTransaction" Title="@L["Transaction Type"]">
                <Template>

                        @L[context.TransactionType]
                        
                    </Template>
                    </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BladderTransaction" Title="@L["Action"]" Filterable="false" Reorderable="false" Sortable="false">
                    <Template>
                        @if (context.TransactionType == TransactionTypes.Mount.ToString())
                        {
                            <a href="/Transactions/CreateMountTransaction/@context.Id">@L["Show"]</a>
                        }
                        @if (context.TransactionType == TransactionTypes.Dismount.ToString())
                        {
                            <a href="/Transactions/CreateDismountTransaction/@context.Id">@L["Show"]</a>
                        }
                        @if (context.TransactionType == TransactionTypes.Maintenance.ToString())
                        {
                            <a href="/Transactions/CreateMaintenanceTransaction/@context.Id">@L["Show"]</a>
                        }
                        @if (context.TransactionType == TransactionTypes.Test.ToString())
                        {
                            <a href="/Transactions/CreateTestTransaction/@context.Id">@L["Show"]</a>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right"
                     Count="count" PageSize="@pageSize" PageNumbersCount="5" PageChanged="@PageChanged" />
    </div>
</div>

@code {
    private List<BladderTransaction> Transactions { get; set; } = new() { new BladderTransaction()};
    private List<BladderTransaction> FilteredTransactions { get; set; } = new();
    private string? BladderCodeFilter { get; set; } = string.Empty;
    private DateTime? CreatedAtFromFilter { get; set; }
    private DateTime? CreatedAtToFilter { get; set; }
    private string? TransactionTypeFilter { get; set; } = string.Empty;
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} transactions)";
    int pageSize = 10;
    int count;
    IList<BladderTransaction> selectedItems = new List<BladderTransaction>();

    [Inject]
    private IBladderTransactionService TransactionService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pagingSummaryFormat = L["Displaying page {0} of {1} (total {2} transactions)"];
        Transactions = await TransactionService.GetAllAsync();
        Transactions = Transactions.OrderByDescending(t => t.CreatedAt).ToList();
        FilteredTransactions = Transactions;
        UpdateFilteredTransactions(0);
    }
    private void OnClick(string url)
    {
        navManager.NavigateTo(url, true);
    }

    private void ApplyFilters()
    {
        var query = Transactions.AsQueryable();

        if (!string.IsNullOrEmpty(BladderCodeFilter))
        {
            query = query.Where(t => t.Bladder.BladderCode.Contains(BladderCodeFilter));
        }

        if (CreatedAtFromFilter != null)
        {
            query = query.Where(t => t.CreatedAt >= CreatedAtFromFilter);
        }

        if (CreatedAtToFilter != null)
        {
            query = query.Where(t => t.CreatedAt <= CreatedAtToFilter);
        }

        if (!string.IsNullOrEmpty(TransactionTypeFilter))
        {
            query = query.Where(t => t.TransactionType == TransactionTypeFilter);
        }

        FilteredTransactions = query.ToList();
    }

    private void ClearFilters()
    {
        BladderCodeFilter = null;
        CreatedAtFromFilter = null;
        CreatedAtToFilter = null;
        TransactionTypeFilter = null;
        FilteredTransactions = Transactions;
        UpdateFilteredTransactions(0);
    }

    void PageChanged(PagerEventArgs args)
    {
        UpdateFilteredTransactions(args.Skip);
    }

    void UpdateFilteredTransactions(int skip)
    {
        count = Transactions.Count();
        FilteredTransactions = GetTransactions(skip, pageSize);
        StateHasChanged();
    }

    List<BladderTransaction> GetTransactions(int skip, int take)
    {
        return Transactions.Skip(skip).Take(take).ToList();
    }
}
