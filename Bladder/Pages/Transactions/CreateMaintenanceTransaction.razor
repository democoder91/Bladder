@page "/Transactions/CreateMaintenanceTransaction/{TransactionId:int?}"
@{
    var breadcrumbItems = new List<Volo.Abp.BlazoriseUI.BreadcrumbItem>() {
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(@L["Bladder Transactions"], "/Transactions/Index"),
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(L["Create Maintenance Transaction"]),

    };
}
<Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader BreadcrumbItems="@breadcrumbItems">
</Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader>
@attribute [Authorize("Transaction_MaintenanceCreate")]

@inject IBuildingBladderService bladderService
@inject IBladderTransactionService transactionService
@inject IUiNotificationService uiNotificationService
@inject NavigationManager navigationManager
@inject BladderDbContext context

@inherits BladderComponentBase

<div class="card shadow-sm">
    <div class="card-header">
        <h3>@L["Create Maintenance Transaction"]</h3>
    </div>
    <div class="card-body">
        <RadzenTemplateForm Context="editcontext" TItem="MaintenanceTransaction" Data=@MaintenanceTransaction ValidSubmit Submit="CreateTransaction">
            <DataAnnotationsValidator />


            <RadzenRow>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Code"]</label>
                        <RadzenTextBox Disabled=@isDisabled @bind-Value=@ScannedBladderCode class="w-100" Name="ScannedBladderCode" />
                        <RadzenRequiredValidator Component="ScannedBladderCode" Text="@L["this field is required"]" />
                        <RadzenCustomValidator Component="ScannedBladderCode" Validator="OnBladderCodeChange" Text="@L["Scanned Bladder Dose Not Exist"]" Popup=false />
                    </div>
                </RadzenColumn>
            </RadzenRow>

            @foreach (var maintenanceFinding in MaintenanceTransaction.MaintenanceFindings)
            {
                <div class="form-group">
                    <label class="form-label">@L["Observation"]</label>
                    <div class="row">
                            
                        <div class="col">
                            <RadzenDropDownDataGrid class="form-control" @bind-Value=@maintenanceFinding.FindingId Data=@AvailableFindings TextProperty="Description" ValueProperty="Id" Name="@($"mf{maintenanceFinding.Index}")">
                                <Template>
                                    <div class="d-flex flex-row">
                                        <div class="@((context as Finding).IconClass) align-self-xl-end d-flex  flex-column"></div>
                                        <div class="mx-2">@((context as Finding).Description)</div>
                                    </div>
                                </Template>
                                

                            </RadzenDropDownDataGrid>
                            <RadzenNumericRangeValidator Component="@($"mf{maintenanceFinding.Index}")" Min="1" Max="@int.MaxValue" Text="@L["this field is required"]" />
                            <RadzenCustomValidator Component="@($"mf{maintenanceFinding.Index}")" Validator="() => ValidateMaintenanceFinding(maintenanceFinding)" Text="@L["this observation already exists"]" Popup=false />

                        </div>
                        @if (!isDisabled)
                        {
                            <div class="col-1"><a class="btn btn-danger " @onclick="()=>RemoveFindingSelect(maintenanceFinding)">Remove</a></div>
                        }

                    </div>




                </div>
            }
                    <ValidationMessage style="color:red;" For="()=> MaintenanceTransaction.MaintenanceFindings" />
            @if (!isDisabled)
            {
                <a class="btn btn-success" @onclick="AddFinding">@L["Add Observation"]</a>
            }

            <div class="d-flex flex-row justify-content-md-center">
                <div class="form-group mx-1">
                    @if (!isDisabled)
                    {
                        <button type="submit" class="btn btn-primary">@L["Create Transaction"]</button>
                    }
                </div>
                <div class="form-group mx-1">
                    <a href="/Transactions/Index" class="btn btn-secondary">@L["Cancel"]</a>
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>

@code {
    [Parameter] public int TransactionId { get; set; }
    int index;
    public MaintenanceTransaction MaintenanceTransaction { get; set; } = new() ;
    public List<BuildingBladder> Bladders { get; set; } = new List<BuildingBladder>();
    public List<BuildingBladder> AllBladders { get; set; } = new List<BuildingBladder>();
    public List<Finding> AvailableFindings { get; set; } = new List<Finding>();
    public List<Finding> FindingSelects { get; set; } = new List<Finding>();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        Bladders = await bladderService.GetAllMaintainableAsync();
        AvailableFindings = await context.Finding.ToListAsync();
        if (TransactionId != 0)
        {
            MaintenanceTransaction = await context.Set<MaintenanceTransaction>()
                .Include(mt => mt.MaintenanceFindings)
                .ThenInclude(mf => mf.Finding)
                .FirstOrDefaultAsync(mt => mt.Id == TransactionId);
            isDisabled = true;
            AllBladders = await bladderService.GetAllAsync();

            foreach (var maintenanceFinding in MaintenanceTransaction.MaintenanceFindings)
            {
                index++;
                maintenanceFinding.Index = index;   
            }
        }
    }
    public string? ScannedBladderCode { get; set; }
    public bool OnBladderCodeChange()
    {
        if (ScannedBladderCode is not null)
        {
            if (Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode))
            {
                MaintenanceTransaction.BladderId = Bladders.FirstOrDefault(b => b.BladderCode == ScannedBladderCode).Id;
            }
            return Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode);
        }
        else
        {
            return true;
        }

    }

    public bool ValidateMaintenanceFinding(MaintenanceFinding maintenanceFinding)
    {
        var otherFindingIds = MaintenanceTransaction.MaintenanceFindings.Where(mf => mf != maintenanceFinding).Select(mf => mf.FindingId);
        if (otherFindingIds.Contains(maintenanceFinding.FindingId) && maintenanceFinding.FindingId != 0)
        {
            return false;

        }
        return true;

    }


    private async Task CreateTransaction()
    {
        if (MaintenanceTransaction.MaintenanceFindings.Count <= 0)
        {
            await uiNotificationService.Error(L["Please add one or more observations for the bladder "]);
            return;
        }

        foreach (var item in MaintenanceTransaction.MaintenanceFindings)
        {
            item.Finding = null;
        }
        MaintenanceTransaction.CreatedAt = DateTime.Now;
        MaintenanceTransaction.TransactionType = TransactionTypes.Maintenance.ToString();
        await transactionService.CreateAsync(MaintenanceTransaction);



        var selectedBladder = await context.Bladders.FirstOrDefaultAsync(b => b.Id == MaintenanceTransaction.BladderId);
        if (selectedBladder != null)
        {
            selectedBladder.Status = BladderStatus.Testing.ToString();
            await bladderService.UpdateAsync(selectedBladder);
        }

        navigationManager.NavigateTo("/Transactions/Index");
    }

    private void AddFinding()
    {
        index++;
        MaintenanceTransaction.MaintenanceFindings.Add(new MaintenanceFinding() { MaintenanceTransactionId = MaintenanceTransaction.Id , Index = index });
    }

    private void RemoveFindingSelect(MaintenanceFinding maintenanceFinding)
    {
        if (!isDisabled)
        {
            MaintenanceTransaction.MaintenanceFindings.Remove(maintenanceFinding);
        }
    }

    
}
