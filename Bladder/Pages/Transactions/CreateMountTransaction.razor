@page "/Transactions/CreateMountTransaction/{TransactionId:int?}"
@{
    var breadcrumbItems = new List<Volo.Abp.BlazoriseUI.BreadcrumbItem>() {
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(@L["Bladder Transactions"], "/Transactions/Index"),
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(L["Create Mount Transaction"]),

    };
}
<Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader BreadcrumbItems="@breadcrumbItems">
</Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader>
@attribute [Authorize("Transaction_MountCreate")]

@inject IBuildingBladderService bladderService
@inject IBuildingMachineService machineService
@inject IBladderTransactionService transactionService
@inject IUiNotificationService uiNotificationService
@inject NavigationManager navigationManager
@inject BladderDbContext context

@inherits BladderComponentBase

<div class="card shadow-sm" >
    <div class="card-header">
        <h3>@L["Create Mount Transaction"]</h3>
    </div>
    <div class="card-body">
        <RadzenTemplateForm TItem="MountTransaction" Data=@MountTransaction  Submit="CreateTransaction">
            <DataAnnotationsValidator />

            
                <RadzenRow>
                <RadzenColumn>
                        <div class="form-group">
                            <label class="form-label">@L["Bladder Code"]</label>
                            <RadzenTextBox Disabled=@isDisabled @bind-Value=@ScannedBladderCode  class="w-100" Name="ScannedBladderCode" />
                            <RadzenRequiredValidator Component="ScannedBladderCode" Text="@L["this field is required"]" />
                            <RadzenCustomValidator Component="ScannedBladderCode" Validator="OnBladderCodeChange" Text="@L["Scanned Bladder Dose Not Exist"]" Popup=false />
                        </div>
                    </RadzenColumn>


                <RadzenColumn>
                        <div class="form-group">
                            <label class="form-label">@L["Machine Code"]</label>

                        <RadzenTextBox Disabled=@isDisabled @bind-Value=@ScannedMachineCode class="w-100" Name="ScannedMachineCode" />
                        <RadzenRequiredValidator Component="ScannedMachineCode" Text="@L["this field is required"]" />
                        <RadzenCustomValidator Component="ScannedMachineCode" Validator="OnMachineCodeChange" Text="@L["Scanned Machine Dose Not Exist"]" Popup=false />
                    </div>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                <RadzenColumn>
                    <RadzenCheckBox @bind-Value=@MountTransaction.ChangedRotaryJoint Name="CheckBox1" Disabled=@isDisabled />
                    <RadzenLabel Text="@L["Changed Rotary Joint"]" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenColumn>

                <RadzenColumn>
                    <RadzenCheckBox @bind-Value=@MountTransaction.ChangedMainMandrillSeal Name="CheckBox1" Disabled=@isDisabled />
                    <RadzenLabel Text="@L["Changed Main Mandrill Seals"]" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenColumn>

                <RadzenColumn>
                    <RadzenCheckBox @bind-Value=@MountTransaction.ChangedPiping Name="CheckBox1" Disabled=@isDisabled />
                    <RadzenLabel Text="@L["Changed Piping"]" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenColumn>

                <RadzenColumn>
                    <RadzenCheckBox @bind-Value=@MountTransaction.ChangedCopperElement Name="CheckBox1" Disabled=@isDisabled />
                    <RadzenLabel Text="@L["Changed Copper Element"]" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenColumn>

                <RadzenColumn>
                    <RadzenCheckBox @bind-Value=@MountTransaction.ChangedShoulderSeal Name="CheckBox1" Disabled=@isDisabled />
                    <RadzenLabel Text="@L["Changed Shoulder Seals"]" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenColumn>

                </RadzenRow>

            <RadzenRow class="mt-2">
                    @if (!isDisabled)
                    {
                            <button type="submit" class="btn btn-primary">@L["Create Transaction"]</button>
                    }
                            <a href="/Transactions/Index" class="btn btn-secondary">@L["Cancel"]</a>
            </RadzenRow>
        </RadzenTemplateForm>
    </div>
</div>

@code {
    [Parameter] public int TransactionId { get; set; }
    public MountTransaction MountTransaction { get; set; } = new();
    public List<BuildingBladder> AllBladders { get; set; } = new List<BuildingBladder>();
    public List<BuildingBladder> Bladders { get; set; } = new List<BuildingBladder>();
    public List<BuildingMachine> Machines { get; set; } = new List<BuildingMachine>();
    public List<BuildingMachine> AllMachines { get; set; } = new List<BuildingMachine>();
    bool isDisabled;


    protected override async Task OnInitializedAsync()
    {
        if (TransactionId != 0)
        {
            MountTransaction = await context.Set<MountTransaction>()
            .Include(mt => mt.Bladder)
            .Include(mt => mt.Machine)
            .FirstOrDefaultAsync(mt => mt.Id == TransactionId);
            isDisabled = true;
        }
        if (isDisabled)
        {
            ScannedBladderCode = MountTransaction.Bladder.BladderCode;    
            ScannedMachineCode = MountTransaction.Machine.Code;    
        }

        Bladders = await bladderService.GetAllMountableAsync();
        AllBladders = await bladderService.GetAllAsync();
        Machines = await machineService.GetAllAsync();
        Machines = Machines.Where(m => ! m.Full).ToList(); 
        AllMachines = await machineService.GetAllAsync();
    }
    public string? ScannedBladderCode { get; set; }
    public bool OnBladderCodeChange()
    {
        if (ScannedBladderCode is not null)
        {
            if (Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode))
            {
                MountTransaction.BladderId = Bladders.FirstOrDefault(b => b.BladderCode == ScannedBladderCode).Id;
            }
            return Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode);
        }
        else
        {
            return true;
        }

    }

    public string? ScannedMachineCode { get; set; }
    public bool OnMachineCodeChange()
    {
        if (ScannedMachineCode is not null)
        {
            if (Machines.Select(b => b.Code).Contains(ScannedMachineCode))
            {
                MountTransaction.MachineId = Machines.FirstOrDefault(b => b.Code == ScannedMachineCode).Id;
            }
            return Machines.Select(b => b.Code).Contains(ScannedMachineCode);
        }
        else
        {
            return true;
        }

        
    }

    private  async Task CreateTransaction()
    {
        
        MountTransaction.CreatedAt = DateTime.Now;
        MountTransaction.TransactionType = TransactionTypes.Mount.ToString();
        await transactionService.CreateAsync(MountTransaction);
        navigationManager.NavigateTo("/Transactions/Index");
        MountTransaction.Bladder = await context.Bladders.FirstOrDefaultAsync(b => b.Id == MountTransaction.BladderId);
        MountTransaction.Bladder.Status = BladderStatus.Mounted.ToString();
        MountTransaction.Machine = await context.Machines.FirstOrDefaultAsync(b => b.Id == MountTransaction.MachineId);
        MountTransaction.Machine.Full = true;

        await machineService.UpdateAsync(MountTransaction.Machine);
        await bladderService.UpdateAsync(MountTransaction.Bladder);

        

    }
}