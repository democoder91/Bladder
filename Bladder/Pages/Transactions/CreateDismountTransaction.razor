@page "/Transactions/CreateDismountTransaction/{TransactionId:int?}"
@{
    var breadcrumbItems = new List<Volo.Abp.BlazoriseUI.BreadcrumbItem>() {
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(@L["Bladder Transactions"], "/Transactions/Index"),
        new Volo.Abp.BlazoriseUI.BreadcrumbItem(L["Create Dismount Transaction"]),

    };
}
<Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader BreadcrumbItems="@breadcrumbItems">
</Volo.Abp.AspNetCore.Components.Web.Theming.Layout.PageHeader>
@attribute [Authorize("Transaction_DismountCreate")]

@inject IBuildingBladderService bladderService
@inject IBladderTransactionService transactionService
@inject IUiNotificationService uiNotificationService
@inject NavigationManager navigationManager
@inject BladderDbContext context

@inherits BladderComponentBase

<div class="card shadow-sm">
    <div class="card-header">
        <h3>@L["Create Dismount Transaction"]</h3>
    </div>
    <div class="card-body">
        <RadzenTemplateForm TItem="DismountTransaction" Data=@DismountTransaction ValidSubmit Submit="CreateTransaction">
            <DataAnnotationsValidator />

            <RadzenRow>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Code"]</label>
                        <RadzenTextBox Disabled=@isDisabled @bind-Value=@ScannedBladderCode class="w-100" Name="ScannedBladderCode" AutoComplete=false/>
                        <RadzenRequiredValidator Component="ScannedBladderCode" Text="@L["this field is required"]" />
                        <RadzenCustomValidator Component="ScannedBladderCode" Validator="OnBladderCodeChange" Text="@L["Scanned Bladder Dose Not Exist"]" Popup=false />
                    </div>
                </RadzenColumn>
            </RadzenRow>

            <div class="d-flex flex-row justify-content-md-center">
                <div class="form-group mx-1">
                    @if (!isDisabled)
                    {
                        <button type="submit" class="btn btn-primary">@L["Create Transaction"]</button>
                    }
                </div>
                <div class="form-group mx-1">
                    <a href="/Transactions/Index" class="btn btn-secondary">@L["Cancel"]</a>
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>

@code {
    [Parameter] public int TransactionId { get; set; }
    public DismountTransaction DismountTransaction { get; set; } = new();
    public List<BuildingBladder> Bladders { get; set; } = new List<BuildingBladder>();
    public List<BuildingBladder> AllBladders { get; set; } = new List<BuildingBladder>();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (TransactionId != 0)
        {
            DismountTransaction = await context.Set<DismountTransaction>()
            .Include(dt => dt.Bladder)
            .FirstOrDefaultAsync(dt => dt.Id == TransactionId);
            isDisabled = true;
            AllBladders = await bladderService.GetAllAsync();
        }

        if (isDisabled)
        {
            ScannedBladderCode = DismountTransaction.Bladder.BladderCode;
        }



        Bladders = await bladderService.GetAllDismountableAsync();
    }

    public string? ScannedBladderCode { get; set; }
    public bool OnBladderCodeChange()
    {
        if (ScannedBladderCode is not null)
        {
            if (Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode))
            {
                DismountTransaction.BladderId = Bladders.FirstOrDefault(b => b.BladderCode == ScannedBladderCode).Id;
            }
            return Bladders.Select(b => b.BladderCode).Contains(ScannedBladderCode);
        }
        else
        {
            return true;
        }

    }

    private async Task CreateTransaction()
    {
        DismountTransaction.CreatedAt = DateTime.Now;
        DismountTransaction.TransactionType = TransactionTypes.Dismount.ToString();
        await transactionService.CreateAsync(DismountTransaction);
        DismountTransaction.Bladder = await context.Bladders.FirstOrDefaultAsync(b => b.Id == DismountTransaction.BladderId);
        DismountTransaction.Bladder.Status = BladderStatus.Maintenance.ToString();

        await bladderService.UpdateAsync(DismountTransaction.Bladder);

        var lastMountTransaction = await transactionService.GetLastMountTransactionAsync(DismountTransaction.BladderId);

        if (lastMountTransaction != null)
        {
            // Find the corresponding building machine and update its Full property
            var buildingMachine = await context.Machines.FirstOrDefaultAsync(bm => bm.Id == lastMountTransaction.MachineId);
            if (buildingMachine != null)
            {
                if (buildingMachine.BladderOneId == DismountTransaction.BladderId)
                {
                    buildingMachine.BladderOneId = null;
                }
                else if (buildingMachine.BladderTwoId == DismountTransaction.BladderId)
                {
                    buildingMachine.BladderTwoId = null;
                }

                if (buildingMachine.BladderOneId == null || buildingMachine.BladderTwoId == null)
                {
                    buildingMachine.Full = false;  
                }
                context.Machines.Update(buildingMachine);
                await context.SaveChangesAsync();
            }
        }

        
        navigationManager.NavigateTo("/Transactions/Index");
    }
}
