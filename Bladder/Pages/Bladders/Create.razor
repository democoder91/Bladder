@page "/Bladders/Create"

@attribute [Authorize("Bladder_Create")]
@inject IBuildingBladderService bladderService;
@inject IBladderSizeService sizeService;
@inject BladderDbContext dbContext;
@inject NavigationManager navigationManager;
@inject IUiNotificationService uiNotificationService


@inherits BladderComponentBase

<div class="card">
    <div class="card-header">
        <h3>@L["Create New Bladder"]</h3>
    </div>
    <div class="card-body">
        <RadzenTemplateForm TItem="BuildingBladder" Data=@Bladder Submit=@CreateBladder >
            <DataAnnotationsValidator />

            <RadzenRow>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Code"]</label>
                        <RadzenTextBox @bind-Value=@Bladder.BladderCode class="w-100" Name="BladderCode"/>
                        <RadzenRequiredValidator Component="BladderCode" Text="@L["this field is required"]"/>
                        <RadzenCustomValidator Component="BladderCode" Validator=@ValidateUniqueBladderCode Text="@L["Blader Code Already Exists"]"/>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Size"]</label>
                        <RadzenDropDown Name="BladderSize"  @bind-Value=@Bladder.BladderSizeId 
                        Data=@Sizes 
                        TextProperty="Name" 
                        ValueProperty="Id" 
                        Style="width: 100%; " />

                        <RadzenNumericRangeValidator Component="BladderSize" Min="1" Max="int.MaxValue" Text=@L["this field is required"]  />
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Expiry Date"]</label>
                        <RadzenDatePicker @bind-Value=@Bladder.ExpiryDate class="w-100" ShowTime="false" DateFormat="dd/MM/yyyy" />
                        <ValidationMessage style="color:red;" For="@(() => Bladder.ExpiryDate)" />
                    </div>
                </RadzenColumn>

                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Status"]</label>
                        <RadzenDropDown @bind-Value=@Bladder.Status Data=@BladderStatusDictionary TextProperty=Value ValueProperty=Key Style="width: 100%; max-width: 400px;" />
                        <ValidationMessage style="color:red;" For="() => Bladder.Status" />
                    </div>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow >
                <div class="form-group mx-1">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="@L["Create"]" ButtonStyle="ButtonStyle.Primary" />

                </div>
                <div class="form-group mx-1">
                    <RadzenButton Click=@(args => navigationManager.NavigateTo("/Bladders/Index")) Text="@L["Cancel"]" ButtonStyle="ButtonStyle.Secondary" />
                </div>
            </RadzenRow>

        </RadzenTemplateForm>
    </div>
</div>

@code {
    public BuildingBladder Bladder { get; set; } = new() { ExpiryDate = DateTime.Now };
    public List<BladderSize> Sizes { get; set; }
    public Dictionary<string, string> BladderStatusDictionary { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Sizes = await sizeService.GetAllAsync();
        foreach (var item in Enum.GetNames(typeof(BladderStatus)))
        {
            BladderStatusDictionary.Add(item, L[item]);    
        }
    }
    public bool ValidateUniqueBladderCode()
    {
        if (Bladder.BladderCode is not null)
        {
            var otherBladders = dbContext.Bladders.Where(b => b.Id != Bladder.Id).Where(b => b.BladderCode == Bladder.BladderCode).ToList();
            if (otherBladders.Count > 0)
            {
                return false;   
            }
            return true;
        }
        return true;
    }

    public async Task CreateBladder()
    {
        var existingBladder = dbContext.Set<BuildingBladder>()
                        .FirstOrDefault(b => b.Id != Bladder.Id && b.BladderCode == Bladder.BladderCode);

        if (existingBladder != null)
        {
            await uiNotificationService.Error(L["Bladder Code Must Be Unique"]);
            return;
        }
        await bladderService.CreateAsync(Bladder);
        navigationManager.NavigateTo("/Bladders/Index", true);
    }
    

}
