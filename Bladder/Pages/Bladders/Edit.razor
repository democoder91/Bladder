@page "/Bladders/Edit/{id:int}"
@attribute [Authorize("Bladder_Create")]
@inject IBuildingBladderService bladderService;
@inject IBladderSizeService sizeService;
@inject BladderDbContext dbContext;
@inject NavigationManager navigationManager;
@inject IUiNotificationService uiNotificationService


@inherits BladderComponentBase

<div class="card">
    <div class="card-header">
        <h3>@L["Edit Bladder"]</h3>
    </div>
    <div class="card-body">
        <RadzenTemplateForm TItem="BuildingBladder" Data=@Bladder Submit=@UpdateBladder>
            <DataAnnotationsValidator />

            <RadzenRow>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Code"]</label>
                        <RadzenTextBox @bind-Value=@Bladder.BladderCode class="w-100" Name="BladderCode" />
                        <RadzenRequiredValidator Component="BladderCode" Text="@L["this field is required"]" />
                        <RadzenCustomValidator Component="BladderCode" Validator=@ValidateUniqueBladderCode Text="@L["Blader Code Already Exists"]" />
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Bladder Size"]</label>
                        <RadzenDropDown Name="BladderSize" @bind-Value=@Bladder.BladderSizeId
                                        Data=@Sizes
                                        TextProperty="Name"
                                        ValueProperty="Id"
                                        Style="width: 100%; " />

                        <RadzenNumericRangeValidator Component="BladderSize" Min="1" Max="int.MaxValue" Text=@L["this field is required"] />
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Expiry Date"]</label>
                        <RadzenDatePicker @bind-Value=@Bladder.ExpiryDate class="w-100" ShowTime="false" DateFormat="dd/MM/yyyy" />
                        <ValidationMessage style="color:red;" For="@(() => Bladder.ExpiryDate)" />
                    </div>
                </RadzenColumn>

                <RadzenColumn>
                    <div class="form-group">
                        <label class="form-label">@L["Status"]</label>
                        <RadzenDropDown @bind-Value=@Bladder.Status Data=@BladderStatusStrings Style="width: 100%;" ReadOnly=@IsDisabled/>
                        <ValidationMessage style="color:red;" For="() => Bladder.Status" />
                    </div>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <div class="form-group mx-1">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="@L["Edit"]" ButtonStyle="ButtonStyle.Primary" />

                </div>
                <div class="form-group mx-1">
                    <RadzenButton Click=@(args => navigationManager.NavigateTo("/Bladders/Index")) Text="@L["Cancel"]" ButtonStyle="ButtonStyle.Secondary" />
                </div>
            </RadzenRow>

        </RadzenTemplateForm>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    public BuildingBladder Bladder { get; set; } = new() { ExpiryDate = DateTime.Now };
    public List<BladderSize> Sizes { get; set; }
    public bool IsDisabled { get; set; }
    public List<string> BladderStatusStrings { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            Bladder = await bladderService.GetAsync(Id);
            IsDisabled = true;
        }
        Sizes = await sizeService.GetAllAsync();

        foreach (var item in Enum.GetNames(typeof(BladderStatus)))
        {
            BladderStatusStrings.Add(L[item]);
        }
    }
    public bool ValidateUniqueBladderCode()
    {
        if (Bladder.BladderCode is not null)
        {
            var otherBladders = dbContext.Bladders.Where(b => b.Id != Bladder.Id).Where(b => b.BladderCode == Bladder.BladderCode).ToList();
            if (otherBladders.Count > 0)
            {
                return false;
            }
            return true;
        }
        return true;
    }

    

    public async Task UpdateBladder()
    {
        var existingBladder = dbContext.Set<BuildingBladder>()
                        .FirstOrDefault(b => b.Id != Bladder.Id && b.BladderCode == Bladder.BladderCode);

        if (existingBladder != null)
        {
            await uiNotificationService.Error(L["Bladder Code Must Be Unique"]);
            return;
        }
        await bladderService.UpdateAsync(Bladder);
        navigationManager.NavigateTo("/Bladders/Index", true);
    }

}
