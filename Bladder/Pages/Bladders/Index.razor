@page "/Bladders/Index"

@inherits BladderComponentBase
@inject IBuildingBladderService bladderService;
@inject IBladderSizeService sizeService;
@inject IJSRuntime jsRuntime
@inject IUiNotificationService uiNotificationService
@attribute [Authorize("Bladder_Index")]

<h1>@L["Bladders"]</h1>

<div class="card shadow-sm">
    <div class="card-header">
        <h2>@L["Filters"]</h2>
    </div>
    <div class="card-body">
        <RadzenRow>
            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Bladder Code"]</div>
                    <InputText @bind-Value="@BladderCodeFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Bladder Size"]</div>
                    <RadzenDropDown @bind-Value=@BladderSizeFilter Data=@Sizes TextProperty="Name" ValueProperty="Id" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Expiry Date From"]</div>
                    <InputDate @bind-Value="@ExpiryDateFromFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Expiry Date To"]</div>
                    <InputDate @bind-Value="@ExpiryDateToFilter" class="form-control" />
                </div>
            </RadzenColumn>

            <RadzenColumn>
                <div class="form-group">
                    <div class="label">@L["Status"]</div>
                    <InputSelect @bind-Value="@StatusFilter" class="form-control">
                        <option value="">Select Status</option>
                        @foreach (var status in Enum.GetValues(typeof(BladderStatus)))
                        {
                            <option value="@status.ToString()">@L[status.ToString()]</option>
                        }
                    </InputSelect>
                </div>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="d-flex flex-row">
                <a @onclick="ApplyFilters" class="btn btn-primary mx-1">@L["Filter"]</a>
                <a @onclick="ClearFilters" class="btn btn-secondary mx-1">@L["Reset"]</a>
        </RadzenRow>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between">
            <div>
                <h2>@L["Building Bladders"]</h2>
            </div>
            <AuthorizeView Policy="Bladder_Create">
                <div>
                    <a href="/Bladders/Create" class="btn btn-primary">@L["Create New Bladder"]</a>
                </div>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body">
        <RadzenDataGrid @bind-Data=@Bladders 
        AllowPaging="true" PageSize="10" AllowFiltering="true" AllowRazenColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced">
            <Columns>
                <RadzenDataGridColumn TItem="BuildingBladder" Property="BladderCode" Title="@L["Bladder Code"]" />
                <RadzenDataGridColumn TItem="BuildingBladder"  Title="@L["Bladder Size"]" >
                    <Template Context="bladder">
                        @(bladder.BladderSize.Name)
                    </Template>
                    </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BuildingBladder" Property="ExpiryDate" Title="@L["Expiry Date"]">
                    <Template Context="bladder">
                        @(((DateTime)bladder.ExpiryDate).ToString("dd/MM/yyyy"))
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BuildingBladder" Property="Status" Title="@(L["Status"] )">
                    <Template>
                        @L[context.Status]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BuildingBladder" Title="@L["Action"]">
                    <Template Context="bladder">
                        <AuthorizeView Policy="Bladder_Edit">
                            <a href="/Bladders/Edit/@bladder.Id" class="btn btn-link">@L["Edit"]</a>
                        </AuthorizeView>
                        <AuthorizeView Policy="Bladder_Delete">
                            <a @onclick="()=> ConfirmDelete(bladder.Id)" class="btn btn-link">@L["Delete"]</a>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    public List<BuildingBladder> Bladders { get; set; } = new();
    public string? BladderCodeFilter { get; set; } = string.Empty;
    public int? BladderSizeFilter { get; set; }
    public DateTime? ExpiryDateFromFilter { get; set; }
    public DateTime? ExpiryDateToFilter { get; set; }
    public string? StatusFilter { get; set; } = string.Empty;
    public List<BladderSize> Sizes { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Bladders = await bladderService.GetAllAsync();
        Sizes = await sizeService.GetAllAsync();

    }

    public async Task ApplyFilters()
    {
        Bladders = await bladderService.GetAllAsync();
        var query = Bladders.AsQueryable();

        if (!string.IsNullOrEmpty(BladderCodeFilter))
        {
            query = query.Where(b => b.BladderCode.Contains(BladderCodeFilter));
        }
        if (BladderSizeFilter != null)
        {
            query = query.Where(b => b.BladderSizeId == BladderSizeFilter);
        }
        if (ExpiryDateFromFilter is not null)
        {
            query = query.Where(b => b.ExpiryDate > ExpiryDateFromFilter);
        }
        if (ExpiryDateToFilter is not null)
        {
            query = query.Where(b => b.ExpiryDate <= ExpiryDateToFilter);
        }
        if (!StatusFilter.IsNullOrEmpty())
        {
            query = query.Where(b => b.Status == StatusFilter);
        }

        Bladders = query.ToList();
    }

    public async Task ClearFilters()
    {
        Bladders = await bladderService.GetAllAsync();
        BladderCodeFilter = null;
        ExpiryDateFromFilter = null;
        ExpiryDateToFilter = null;
        StatusFilter = null; 
        BladderSizeFilter = null;
    }

    private async Task ConfirmDelete(int id)
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to delete this bladder?"].ToString());
        if (result)
        {
            // User confirmed the deletion, proceed with deletion logic
            await DeleteBladder(id);
        }
    }

    private async Task DeleteBladder(int id)
    {
        // Call the service to delete the bladder
        await bladderService.DeleteAsync(id);

        // Refresh the bladder list
        Bladders = await bladderService.GetAllAsync();

        // Show success notification
        await uiNotificationService.Success(@L["Bladder Deleted Successfully"]);
    }
}
